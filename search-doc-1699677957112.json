[{"title":"Countdown Example","type":0,"sectionRef":"#","url":"/TimerCountdown/docs/countdownExample","content":"Countdown Example Countdown: local TimerCountdown = require(...); local NewTimerCountdown = TimerCountdown.new(); local Countdown = NewTimerCountdown:Countdown(&quot;CountdownName&quot;, 10, 1, function(t) print(&quot;Update has updated: &quot; .. t); end, true); Countdown:Connect(function() print(&quot;Countdown has finished!&quot;); end); ","keywords":""},{"title":"TimerCountdown","type":0,"sectionRef":"#","url":"/TimerCountdown/api/TimerCountdown","content":"","keywords":""},{"title":"Functions​","type":1,"pageTitle":"TimerCountdown","url":"/TimerCountdown/api/TimerCountdown#functions","content":" "},{"title":"new​","type":1,"pageTitle":"TimerCountdown","url":"/TimerCountdown/api/TimerCountdown#new","content":"&lt;/&gt; TimerCountdown.new() → TimerCountdown Creates a new timer object.  "},{"title":"Countdown​","type":1,"pageTitle":"TimerCountdown","url":"/TimerCountdown/api/TimerCountdown#Countdown","content":"&lt;/&gt; TimerCountdown:Countdown( countdownName: string, start: number, interval: number, updateFn: function, stopAtZero: boolean ) → Signal Uses Sleitnicks Timer module to create a Simple timer that counts down from start to 0. Returns a signal that fires when the countdown is finished. If stopAtZero is true, the countdown will stop at 0. If it is false, the countdown will stop at 1. Countdown is automatically disconnected at the end of the countdown.  "},{"title":"Timer​","type":1,"pageTitle":"TimerCountdown","url":"/TimerCountdown/api/TimerCountdown#Timer","content":"&lt;/&gt; TimerCountdown:Timer( timerName: string, endT: number, interval: number, updateFn: function ) → Signal Uses Sleitnicks Timer module to create a Simple timer that counts up from 0 to endT. Returns a signal that fires when the timer is finished. Timer is automatically disconnected at the end of the timer.  "},{"title":"DestroyWithName​","type":1,"pageTitle":"TimerCountdown","url":"/TimerCountdown/api/TimerCountdown#DestroyWithName","content":"&lt;/&gt; TimerCountdown:DestroyWithName(name: string) → () Destroys the timer/countdown with the name name.  "},{"title":"DestroyAll​","type":1,"pageTitle":"TimerCountdown","url":"/TimerCountdown/api/TimerCountdown#DestroyAll","content":"&lt;/&gt; TimerCountdown:DestroyAll() → () Destroys all timers/countdowns.  "},{"title":"Destroy​","type":1,"pageTitle":"TimerCountdown","url":"/TimerCountdown/api/TimerCountdown#Destroy","content":"&lt;/&gt; TimerCountdown:Destroy() → () Destroys the TimerCountdown object. "},{"title":"Introduction","type":0,"sectionRef":"#","url":"/TimerCountdown/docs/intro","content":"Introduction TimerCountdown is a simple timer module that uses Sleitnick's [Timer] module to create more specific timers for your different use-cases. API Check out the TimerCountdown API if you want to get straight to the code.","keywords":""},{"title":"Timer","type":0,"sectionRef":"#","url":"/TimerCountdown/api/Timer","content":"","keywords":""},{"title":"Types​","type":1,"pageTitle":"Timer","url":"/TimerCountdown/api/Timer#types","content":" "},{"title":"CallbackFn​","type":1,"pageTitle":"Timer","url":"/TimerCountdown/api/Timer#CallbackFn","content":"&lt;/&gt; type CallbackFn = () → () Callback function.  "},{"title":"TimeFn​","type":1,"pageTitle":"Timer","url":"/TimerCountdown/api/Timer#TimeFn","content":"&lt;/&gt; type TimeFn = () → number Time function. "},{"title":"Properties​","type":1,"pageTitle":"Timer","url":"/TimerCountdown/api/Timer#properties","content":" "},{"title":"Interval​","type":1,"pageTitle":"Timer","url":"/TimerCountdown/api/Timer#Interval","content":"&lt;/&gt; Timer.Interval: number Interval at which the Tick event fires.  "},{"title":"UpdateSignal​","type":1,"pageTitle":"Timer","url":"/TimerCountdown/api/Timer#UpdateSignal","content":"&lt;/&gt; Timer.UpdateSignal: RBXScriptSignal | Signal The signal which updates the timer internally.  "},{"title":"TimeFunction​","type":1,"pageTitle":"Timer","url":"/TimerCountdown/api/Timer#TimeFunction","content":"&lt;/&gt; Timer.TimeFunction: TimeFn The function which gets the current time.  "},{"title":"AllowDrift​","type":1,"pageTitle":"Timer","url":"/TimerCountdown/api/Timer#AllowDrift","content":"&lt;/&gt; Timer.AllowDrift: boolean Flag which indicates if the timer is allowed to drift. This is set to true by default. This flag must be set before calling Start or StartNow. This flag should only be set to false if it is necessary for drift to be eliminated.  "},{"title":"Tick​","type":1,"pageTitle":"Timer","url":"/TimerCountdown/api/Timer#Tick","content":"&lt;/&gt; Timer.Tick: RBXScriptSignal | Signal The event which is fired every time the timer hits its interval. "},{"title":"Functions​","type":1,"pageTitle":"Timer","url":"/TimerCountdown/api/Timer#functions","content":" "},{"title":"new​","type":1,"pageTitle":"Timer","url":"/TimerCountdown/api/Timer#new","content":"&lt;/&gt; Timer.new(interval: number) → Timer Creates a new timer.  "},{"title":"Simple​","type":1,"pageTitle":"Timer","url":"/TimerCountdown/api/Timer#Simple","content":"&lt;/&gt; Timer.Simple( interval: number, callback: CallbackFn, startNow: boolean?, updateSignal: RBXScriptSignal? , timeFn: TimeFn? ) → RBXScriptConnection  Creates a simplified timer which just fires off a callback function at the given interval. -- Basic: Timer.Simple(1, function() print(&quot;Tick&quot;) end) -- Using other arguments: Timer.Simple(1, function() print(&quot;Tick&quot;) end, true, RunService.Heartbeat, os.clock)   "},{"title":"Is​","type":1,"pageTitle":"Timer","url":"/TimerCountdown/api/Timer#Is","content":"&lt;/&gt; Timer.Is(obj: any) → boolean Returns true if the given object is a Timer.  "},{"title":"Start​","type":1,"pageTitle":"Timer","url":"/TimerCountdown/api/Timer#Start","content":"&lt;/&gt; Timer:Start() → () Starts the timer. Will do nothing if the timer is already running. timer:Start()   "},{"title":"StartNow​","type":1,"pageTitle":"Timer","url":"/TimerCountdown/api/Timer#StartNow","content":"&lt;/&gt; Timer:StartNow() → () Starts the timer and fires off the Tick event immediately. Will do nothing if the timer is already running. timer:StartNow()   "},{"title":"Stop​","type":1,"pageTitle":"Timer","url":"/TimerCountdown/api/Timer#Stop","content":"&lt;/&gt; Timer:Stop() → () Stops the timer. Will do nothing if the timer is already stopped. timer:Stop()   "},{"title":"IsRunning​","type":1,"pageTitle":"Timer","url":"/TimerCountdown/api/Timer#IsRunning","content":"&lt;/&gt; Timer:IsRunning() → boolean Returns true if the timer is currently running. if timer:IsRunning() then -- Do something end   "},{"title":"Destroy​","type":1,"pageTitle":"Timer","url":"/TimerCountdown/api/Timer#Destroy","content":"&lt;/&gt; Timer:Destroy() → () Destroys the timer. This will also stop the timer. "},{"title":"Timer Example","type":0,"sectionRef":"#","url":"/TimerCountdown/docs/timerExample","content":"Timer Example Timer: local TimerCountdown = require(...); local NewTimerCountdown = TimerCountdown.new(); local Timer = NewTimerCountdown:Timer(&quot;TimerName&quot;, 10, 1, function(t) print(&quot;Timer has updated &quot; .. t); end); Timer:Connect(function() print(&quot;Timer has finished!&quot;); end); ","keywords":""},{"title":"Signal","type":0,"sectionRef":"#","url":"/TimerCountdown/api/Signal","content":"","keywords":""},{"title":"Types​","type":1,"pageTitle":"Signal","url":"/TimerCountdown/api/Signal#types","content":" "},{"title":"SignalConnection​","type":1,"pageTitle":"Signal","url":"/TimerCountdown/api/Signal#SignalConnection","content":"&lt;/&gt; interface SignalConnection { Connected: boolean Disconnect: (SignalConnection) → () } Represents a connection to a signal. local connection = signal:Connect(function() end) print(connection.Connected) --&gt; true connection:Disconnect() print(connection.Connected) --&gt; false   "},{"title":"ConnectionFn​","type":1,"pageTitle":"Signal","url":"/TimerCountdown/api/Signal#ConnectionFn","content":"&lt;/&gt; type ConnectionFn = (...any) → () A function connected to a signal. "},{"title":"Functions​","type":1,"pageTitle":"Signal","url":"/TimerCountdown/api/Signal#functions","content":" "},{"title":"new​","type":1,"pageTitle":"Signal","url":"/TimerCountdown/api/Signal#new","content":"&lt;/&gt; Signal.new() → Signal Constructs a new Signal  "},{"title":"Wrap​","type":1,"pageTitle":"Signal","url":"/TimerCountdown/api/Signal#Wrap","content":"&lt;/&gt; Signal.Wrap( rbxScriptSignal: RBXScriptSignal -- Existing RBXScriptSignal to wrap ) → Signal Constructs a new Signal that wraps around an RBXScriptSignal. For example: local signal = Signal.Wrap(workspace.ChildAdded) signal:Connect(function(part) print(part.Name .. &quot; added&quot;) end) Instance.new(&quot;Part&quot;).Parent = workspace   "},{"title":"Is​","type":1,"pageTitle":"Signal","url":"/TimerCountdown/api/Signal#Is","content":"&lt;/&gt; Signal.Is( obj: any-- Object to check ) → boolean-- true if the object is a Signal. Checks if the given object is a Signal.  "},{"title":"Connect​","type":1,"pageTitle":"Signal","url":"/TimerCountdown/api/Signal#Connect","content":"&lt;/&gt; Signal:Connect(fn: ConnectionFn) → SignalConnection Connects a function to the signal, which will be called anytime the signal is fired. signal:Connect(function(msg, num) print(msg, num) end) signal:Fire(&quot;Hello&quot;, 25)   "},{"title":"Once​","type":1,"pageTitle":"Signal","url":"/TimerCountdown/api/Signal#Once","content":"&lt;/&gt; Signal:Once(fn: ConnectionFn) → SignalConnection Connects a function to the signal, which will be called the next time the signal fires. Once the connection is triggered, it will disconnect itself. signal:Once(function(msg, num) print(msg, num) end) signal:Fire(&quot;Hello&quot;, 25) signal:Fire(&quot;This message will not go through&quot;, 10)   "},{"title":"DisconnectAll​","type":1,"pageTitle":"Signal","url":"/TimerCountdown/api/Signal#DisconnectAll","content":"&lt;/&gt; Signal:DisconnectAll() → () Disconnects all connections from the signal. signal:DisconnectAll()   "},{"title":"Fire​","type":1,"pageTitle":"Signal","url":"/TimerCountdown/api/Signal#Fire","content":"&lt;/&gt; Signal:Fire(...: any) → () Fire the signal, which will call all of the connected functions with the given arguments. signal:Fire(&quot;Hello&quot;) -- Any number of arguments can be fired: signal:Fire(&quot;Hello&quot;, 32, {Test = &quot;Test&quot;}, true)   "},{"title":"FireDeferred​","type":1,"pageTitle":"Signal","url":"/TimerCountdown/api/Signal#FireDeferred","content":"&lt;/&gt; Signal:FireDeferred(...: any) → () Same as Fire, but uses task.defer internally &amp; doesn't take advantage of thread reuse. signal:FireDeferred(&quot;Hello&quot;)   "},{"title":"Wait​","type":1,"pageTitle":"Signal","url":"/TimerCountdown/api/Signal#Wait","content":"This is a yielding function. When called, it will pause the Lua thread that called the function until a result is ready to be returned, without interrupting other scripts. Yields &lt;/&gt; Signal:Wait() → ...any Yields the current thread until the signal is fired, and returns the arguments fired from the signal. Yielding the current thread is not always desirable. If the desire is to only capture the next event fired, using ConnectOnce might be a better solution. task.spawn(function() local msg, num = signal:Wait() print(msg, num) --&gt; &quot;Hello&quot;, 32 end) signal:Fire(&quot;Hello&quot;, 32)   "},{"title":"Destroy​","type":1,"pageTitle":"Signal","url":"/TimerCountdown/api/Signal#Destroy","content":"&lt;/&gt; Signal:Destroy() → () Cleans up the signal. Technically, this is only necessary if the signal is created usingSignal.Wrap. Connections should be properly GC'd once the signal is no longer referenced anywhere. However, it is still good practice to include ways to strictly clean up resources. Calling Destroy on a signal will also disconnect all connections immediately. signal:Destroy()   "},{"title":"ConnectOnce​","type":1,"pageTitle":"Signal","url":"/TimerCountdown/api/Signal#ConnectOnce","content":"deprecated in v1.3.0 &lt;/&gt; This was deprecated in v1.3.0 Use `Signal:Once` instead. Signal:ConnectOnce(fn: ConnectionFn) → SignalConnection  "}]